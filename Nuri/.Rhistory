WHERE
K.GUBUN LIKE 'Y'
AND K.SCHE_DATE LIKE '2012%'
)A
WHERE A.WINNER NOT LIKE '무승부'
GROUP BY A.WINNER
ORDER BY 승리 DESC"
)
barplot(df_win_count[,3],names.arg=df_win_count[,2])
barplot(df_win_count[,2],names.arg=df_win_count[,1])
df_seat_count<-dbGetQuery(conn,
"SELECT
ROWNUM NO,
A.*
FROM
(SELECT
S.STADIUM_NAME 스타디움,
S.SEAT_COUNT 좌석수
FROM
STADIUM S
ORDER BY S.SEAT_COUNT DESC) A
ORDER BY NO "
)
df_seat_count
x <- df_seat_count
pct <- round(x / sum(x) * 100)
labels <- paste(df_seat_count$S.STADIUM_NAME, pct,"%")
pie(x,labels)
x <- df_seat_count$S.SEAT_COUNT
pct <- round(x / sum(x) * 100)
labels <- paste(df_seat_count$S.STADIUM_NAME, pct,"%")
pie(x,labels)
x <- S.SEAT_COUNT
pie(df_seat_count$NSEAT,STADIUM)
pie(df_seat_count$NSEAT,df_seat_count$STADIUM)
pie(df_seat_count$NSEAT,df_seat_count$STADIUM)
pie(df_seat_count[,3], paste(substr(df_seat_count[,2],1,2),df_seat_count[,3]))
pie(df_seat_count$SEAT_COUNT,df_seat_count$STADIUM)
pie(df_seat_count$S.SEAT_COUNT,df_seat_count$STADIUM)
pie(df_seat_count$NSEAT,df_seat_count$STADIUM)
df_seat_count<-dbGetQuery(conn,
"SELECT
ROWNUM NO,
A.*
FROM
(SELECT
S.STADIUM_NAME STADIUM,
S.SEAT_COUNT NSEAT
FROM
STADIUM S
ORDER BY S.SEAT_COUNT DESC) A
ORDER BY NO "
)
unt$NSEAT,df_seat_count$STADIUM)
pie(df_seat_count$NSEAT,df_seat_count$STADIUM)
hist(df_score_count,
xlab = "Average Score",
ylab = "number",
col = "yellow",
border = "blue")
df_score_count<-dbGetQuery(conn,
"SELECT A.*
FROM(SELECT
K.SCHE_DATE DATE,
HT.TEAM_NAME || ' VS ' || AT.TEAM_NAME GAME,
CASE
WHEN K.HOME_SCORE >= K.AWAY_SCORE THEN (K.HOME_SCORE - K.AWAY_SCORE)
ELSE K.AWAY_SCORE - K.HOME_SCORE
END SCOREGAP
FROM
SCHEDULE K
JOIN TEAM HT
ON K.HOMETEAM_ID LIKE HT.TEAM_ID
JOIN TEAM AT
ON K.AWAYTEAM_ID LIKE AT.TEAM_ID
WHERE
K.SCHE_DATE LIKE '2012%'
AND K.GUBUN LIKE 'Y'
ORDER BY SCOREGAP DESC) A"
)
df_score_count<-dbGetQuery(conn,
"SELECT A.*
FROM(SELECT
K.SCHE_DATE DATE,
HT.TEAM_NAME || ' VS ' || AT.TEAM_NAME GAME,
CASE
WHEN K.HOME_SCORE >= K.AWAY_SCORE THEN (K.HOME_SCORE - K.AWAY_SCORE)
ELSE K.AWAY_SCORE - K.HOME_SCORE
END SCOREGAP
FROM
SCHEDULE K
JOIN TEAM HT
ON K.HOMETEAM_ID LIKE HT.TEAM_ID
JOIN TEAM AT
ON K.AWAYTEAM_ID LIKE AT.TEAM_ID
WHERE
K.SCHE_DATE LIKE '2012%'
AND K.GUBUN LIKE 'Y'
ORDER BY SCOREGAP DESC) A"
)
df_score_count<-dbGetQuery(conn,
"SELECT A.*
FROM(SELECT
K.SCHE_DATE DATE,
HT.TEAM_NAME || ' VS ' || AT.TEAM_NAME GAME,
CASE
WHEN K.HOME_SCORE >= K.AWAY_SCORE THEN (K.HOME_SCORE - K.AWAY_SCORE)
ELSE K.AWAY_SCORE - K.HOME_SCORE
END SCOREGAP
FROM
SCHEDULE K
JOIN TEAM HT
ON K.HOMETEAM_ID LIKE HT.TEAM_ID
JOIN TEAM AT
ON K.AWAYTEAM_ID LIKE AT.TEAM_ID
WHERE
K.SCHE_DATE LIKE '2012%'
AND K.GUBUN LIKE 'Y'
ORDER BY SCOREGAP DESC) A "
)
df_score_count<-dbGetQuery(conn,
"SELECT A.*
FROM(SELECT
K.SCHE_DATE GAMEDATE,
HT.TEAM_NAME || ' VS ' || AT.TEAM_NAME GAME,
CASE
WHEN K.HOME_SCORE >= K.AWAY_SCORE THEN (K.HOME_SCORE - K.AWAY_SCORE)
ELSE K.AWAY_SCORE - K.HOME_SCORE
END SCOREGAP
FROM
SCHEDULE K
JOIN TEAM HT
ON K.HOMETEAM_ID LIKE HT.TEAM_ID
JOIN TEAM AT
ON K.AWAYTEAM_ID LIKE AT.TEAM_ID
WHERE
K.SCHE_DATE LIKE '2012%'
AND K.GUBUN LIKE 'Y'
ORDER BY SCOREGAP DESC) A "
)
hist(df_score_count,
xlab = "Average Score",
ylab = "number",
col = "yellow",
border = "blue")
hist(df_score_count$SCOREGAP,
xlab = "SCOREGAP",
ylab = "number",
col = "yellow",
border = "blue")
hist(df_score_count$GAMEDATE,
xlab = "SCOREGAP",
ylab = "SCOREGAP",
col = "yellow",
border = "blue")
hist(df_score_count$GAMEDATE,
xlab = "SCOREGAP",
ylab = "SCOREGAP",
col = "yellow",
border = "blue")
hist(df_score_count$SCOREGAP,
xlab = "SCOREGAP",
ylab = "SCOREGAP",
col = "yellow",
border = "blue")
hist(df_score_count$SCOREGAP,
xlab = "COUNT",
ylab = "SCOREGAP",
col = "yellow",
border = "blue")
hist(df_score_count$SCOREGAP,
xlab = "SCOREGAP",
ylab = "COUNT",
col = "yellow",
border = "blue")
df_month_count
df_month_count<-dbGetQuery(conn,
"SELECT
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201201%') JAN,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201202%') FEB,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201203%') MAR,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201204%') APR,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201205%') MAY,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201206%') JUN,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201207%') JUL,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201208%') AUG,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201209%') SEP,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201210%') OCT,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201211%') NOV,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201212%') DEC
FROM DUAL"
)
df_month_count
input <- df_month_count[,c('month','count')]
print(input)
input <- df_month_count[,c('month','count')]
input <- df_month_count[c('month','count'),]
print(input)
df_month_count<-dbGetQuery(conn,
"SELECT
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201201%') JAN,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201202%') FEB,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201203%') MAR,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201204%') APR,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201205%') MAY,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201206%') JUN,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201207%') JUL,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201208%') AUG,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201209%') SEP,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201210%') OCT,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201211%') NOV,
(SELECT COUNT(*)
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201212%') DEC
FROM DUAL"
)
df_month_count
input <- df_month_count('month','count')
df_month_count
df_month_count
inputx=df_month_count[,1],df_month_count[,2],df_month_count[,3]
inputx=c(df_month_count[,1],df_month_count[,2],df_month_count[,3])
print(inputx)
inputx=c(df_month_count[,1],df_month_count[,2],df_month_count[,3]
df_month_count[,4],df_month_count[,5],df_month_count[,6],
df_month_count[,7],df_month_count[,8],df_month_count[,9],
df_month_count[,10],df_month_count[,11],df_month_count[,12],)
inputx=c(df_month_count[,1],df_month_count[,2],df_month_count[,3]
df_month_count[,4],df_month_count[,5],df_month_count[,6],
df_month_count[,7],df_month_count[,8],df_month_count[,9],
df_month_count[,10],df_month_count[,11],df_month_count[,12])
print(inputx)
inputx=c(df_month_count[,1],df_month_count[,2],df_month_count[,3],
df_month_count[,4],df_month_count[,5],df_month_count[,6],
df_month_count[,7],df_month_count[,8],df_month_count[,9],
df_month_count[,10],df_month_count[,11],df_month_count[,12])
print(inputx)
plot(x = inputm,y = inputc,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
plot(x = inputm,y = inputc,
xlab = "MONTH",
ylab = "COUNT",
main = "Weight vs Milage"
)
plot(x = inputm~y = inputc,
xlab = "MONTH",
ylab = "COUNT",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
plot(x = inputc,y = inputm,
xlab = "MONTH",
ylab = "COUNT",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
inputc=c(df_month_count[,1],df_month_count[,2],df_month_count[,3],
df_month_count[,4],df_month_count[,5],df_month_count[,6],
df_month_count[,7],df_month_count[,8],df_month_count[,9],
df_month_count[,10],df_month_count[,11],df_month_count[,12])
inputm=c(1:12)
plot(x = inputm,y = inputc,
xlab = "MONTH",
ylab = "COUNT",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
plot(x = inputm,y = inputc,
xlab = "MONTH",
ylab = "COUNT",
main = "Weight vs Milage"
)
plot(x = inputm,y = inputc,
xlab = "MONTH",
ylab = "COUNT",
xlim = c(1,12),
ylim = c(0,50),
main = "월별 경기수"
)
df_win_count<-dbGetQuery(conn,
"SELECT
A.WINNER,
COUNT(A.WINNER) 승리
FROM(SELECT
K.SCHE_DATE 경기날짜,
CASE
WHEN K.HOME_SCORE > K.AWAY_SCORE THEN HT.TEAM_NAME
WHEN K.AWAY_SCORE > K.HOME_SCORE THEN AT.TEAM_NAME
ELSE '무승부'
END WINNER
FROM SCHEDULE K
JOIN TEAM HT
ON K.HOMETEAM_ID LIKE HT.TEAM_ID
JOIN TEAM AT
ON K.AWAYTEAM_ID LIKE AT.TEAM_ID
WHERE
K.GUBUN LIKE 'Y'
AND K.SCHE_DATE LIKE '2012%'
)A
WHERE A.WINNER NOT LIKE '무승부'
GROUP BY A.WINNER
ORDER BY 승리 DESC"
)
barplot(df_win_count[,2],names.arg=df_win_count[,1])
pie(df_seat_count$NSEAT,df_seat_count$STADIUM)
hist(df_score_count$SCOREGAP,
xlab = "SCOREGAP",
ylab = "COUNT",
col = "yellow",
border = "blue")
plot(x = inputm,y = inputc,
xlab = "MONTH",
ylab = "COUNT",
xlim = c(1,12),
ylim = c(0,50),
main = "월별 경기수"
)
(select tb.team_name
from team tb
where tb.team_id like t.team_id) 팀명,
round(avg(p.height),2) 평균키
from player p
join team t
on p.team_id like t.team_id
group by t.team_id
having avg(p.height)<(
select avg(pa.height)
from player pa
join team ta
on pa.team_id like ta.team_id
where ta.team_name like '삼성블루윙즈'
")
df_gkHeight_avg
df_gkHeight_avg<-dbGetQuery(conn, "select
(select tb.team_name
from team tb
where tb.team_id like t.team_id) TEAMNAME,
round(avg(p.height),2) AVGHEIGHT
from player p
join team t
on p.team_id like t.team_id
group by t.team_id
having avg(p.height)<(
select avg(pa.height)
from player pa
join team ta
on pa.team_id like ta.team_id
where ta.team_name like '삼성블루윙즈'
")
df_gk_avgh<-dbGetQuery(conn, "select
(select tb.team_name
from team tb
where tb.team_id like t.team_id) TEAMNAME,
round(avg(p.height),2) AVGHEIGHT
from player p
join team t
on p.team_id like t.team_id
group by t.team_id
having avg(p.height)<(
select avg(pa.height)
from player pa
join team ta
on pa.team_id like ta.team_id
where ta.team_name like '삼성블루윙즈'
")
df_gk_avgh
df_gkh_avg<-dbGetQuery(conn, "select
(select tb.team_name
from team tb
where tb.team_id like t.team_id) TEAMNAME,
round(avg(p.height),2) AVGHEIGHT
from player p
join team t
on p.team_id like t.team_id
group by t.team_id
having avg(p.height)<(
select avg(pa.height)
from player pa
join team ta
on pa.team_id like ta.team_id
where ta.team_name like '삼성블루윙즈'
")
df_gkh_avg
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"rachel",
"7003")
rst <- dbGetQuery(conn, "SELECT * FROM TAB")
rst
rst <- dbGetQuery(conn, "SELECT * FROM TEAM")
rst
rst <- dbGetQuery(conn, "SELECT * FROM PLAYER")
rst
rst <- dbGetQuery(conn, "SELECT * FROM STADIUM")
rst
rst <- dbGetQuery(conn, "SELECT * FROM SCHEDULE")
rst
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
dbGetQuery(conn, "SELECT * FROM PLAYER")
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"rachel",
"7003")
rst <- dbGetQuery(conn, "SELECT * FROM TAB")
rst
rst <- dbGetQuery(conn, "SELECT * FROM TEAM")
rst
rst <- dbGetQuery(conn, "SELECT * FROM PLAYER")
rst
rst <- dbGetQuery(conn, "SELECT * FROM STADIUM")
rst
rst <- dbGetQuery(conn, "SELECT * FROM SCHEDULE")
rst
dbGetQuery(conn, "SELECT * FROM PLAYER")
df_gkh_avg<-dbGetQuery(conn, "select
(select tb.team_name
from team tb
where tb.team_id like t.team_id) TEAMNAME,
round(avg(p.height),2) AVGHEIGHT
from player p
join team t
on p.team_id like t.team_id
group by t.team_id
having avg(p.height)<(
select avg(pa.height)
from player pa
join team ta
on pa.team_id like ta.team_id
where ta.team_name like '삼성블루윙즈'
")
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
install.packages("rJava")
install.packages("rJava")
